<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FileMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="fileMap" type="fdp.project.spring.model.File">
		<!-- Beans의 멤버변수(property) 이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="file_id" column="file_id" />
		<result property="origin_name" column="origin_name" />
		<result property="file_name" column="file_name" />
		<result property="file_dir" column="file_dir" />
		<result property="content_type" column="content_type" />
		<result property="file_size" column="file_size" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
		<result property="document_id" column="document_id" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="fdp.project.spring.model.File" resultMap="fileMap">
		SELECT
		file_id, origin_name, file_name, file_dir,
		content_type, file_size,
		reg_date, edit_date, document_id
		FROM file WHERE
		file_id=#{file_id};

	</select>
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="fdp.project.spring.model.File" resultMap="fileMap">
		SELECT file_id, origin_name, file_name, file_dir,
		content_type,
		file_size, reg_date, edit_date, document_id
		FROM file

		<where>

			<if test="file_name != null and file_name != ''">
				file_name LIKE concat('%', #{file_name}, '%')
			</if>

		</where>

		ORDER BY file_id DESC

		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount};
		</if>

	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="fdp.project.spring.model.File" useGeneratedKeys="true"
		keyProperty="file_id">
		INSERT INTO file (origin_name, file_name, file_dir,
		content_type,
		file_size, reg_date, edit_date, document_id)
		VALUES
		(#{origin_name}, #{file_name}, #{file_dir}, #{content_type},
		#{file_size}, #{reg_date}, #{edit_date}, #{document_id});
	</insert>

	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="fdp.project.spring.model.File">
		DELETE FROM file WHERE file_id=#{file_id};
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="fdp.project.spring.model.File">
		UPDATE file SET origin_name=#{origin_name},
		file_name=#{file_name},
		file_dir=#{file_dir},
		content_type=#{content_type}, file_size=#{file_size},
		reg_date=#{reg_date}, edit_date=#{edit_date},
		document_id=#{document_id}
		WHERE
		file_id=#{file_id};
	</update>

	<!-- 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다. count, max, min, sum, avg 함수를 사용한 
		경우 Mapper에서는 resultMap이 아닌 resulType으로 반환한다. -->
	<select id="selectCountAll"
		parameterType="fdp.project.spring.model.File" resultType="int">
		SELECT COUNT(*) FROM file

		<where>
			<if test="file_name != null and file_name != ''">
				file_name LIKE concat('%', #{file_name}, '%')
			</if>
		</where>
	</select>
</mapper>